{"version":3,"sources":["components/FilterBar.tsx","components/TodoList.tsx","components/FormInput.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["classnames","require","FilterBar","prop","filter","changeFilter","className","onClick","defaultProps","TodoList","todoItems","changeState","deleteItem","map","item","completed","key","id","active","type","onChange","checked","title","TodoItem","delete","FormInput","addTodo","onSubmit","e","preventDefault","target","input","value","autoComplete","required","name","todoList","App","useState","JSON","parse","localStorage","getItem","stringify","setTodoItems","setFilter","useEffect","setItem","newTodoItems","length","newTodoItem","push","console","log","index","findIndex","x","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.48c4d263.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./FilterBar.scss\";\r\nconst classnames = require(\"classnames\");\r\n\r\nFilterBar.propTypes = {\r\n    filter: PropTypes.string,\r\n    changeFilter: PropTypes.func,\r\n};\r\n\r\nFilterBar.defaultProps = {\r\n    filter: \"all\",\r\n    changeFilter: null,\r\n};\r\n\r\nexport default function FilterBar(prop: { filter?: string; changeFilter: Function }) {\r\n    const { filter, changeFilter } = prop;\r\n\r\n    return (\r\n        <div className=\"filter-bar\">\r\n            <div className=\"bar-item\" onClick={() => changeFilter(\"all\")}>\r\n                All\r\n            </div>\r\n            <div className=\"bar-item\" onClick={() => changeFilter(\"active\")}>\r\n                Active\r\n            </div>\r\n            <div className=\"bar-item\" onClick={() => changeFilter(\"done\")}>\r\n                Done\r\n            </div>\r\n            <div className={classnames(\"current\", filter)}></div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TodoItem from \"../models/TodoItem\";\r\nimport \"./TodoList.scss\";\r\nconst classnames = require(\"classnames\");\r\n\r\nTodoList.propTypes = {\r\n    todoItems: PropTypes.array,\r\n    filter: PropTypes.string,\r\n    changeState: PropTypes.func,\r\n    delete: PropTypes.func,\r\n};\r\n\r\nTodoList.defaultProps = {\r\n    TodoItem: [],\r\n    filter: \"all\",\r\n    changeState: null,\r\n    delete: null,\r\n};\r\n\r\ninterface PropType {\r\n    todoItems: TodoItem[];\r\n    filter?: string;\r\n    changeState: Function;\r\n    deleteItem: Function;\r\n}\r\n\r\nexport default function TodoList(prop: PropType) {\r\n    const { todoItems, changeState, deleteItem, filter } = prop;\r\n\r\n    return (\r\n        <div className=\"todo-list\">\r\n            {todoItems?.map(\r\n                (item) =>\r\n                    (filter === \"all\" ||\r\n                        (filter === \"done\" && item.completed === true) ||\r\n                        (filter === \"active\" && item.completed === false)) && (\r\n                        <div\r\n                            key={item.id}\r\n                            className={classnames(\"item\", { active: item.completed })}\r\n                        >\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                onChange={() => changeState(item.id)}\r\n                                checked={item.completed}\r\n                            ></input>\r\n                            <label>{item.title}</label>\r\n                            {item.completed && (\r\n                                <i className=\"far fa-trash\" onClick={() => deleteItem(item.id)}></i>\r\n                            )}\r\n                        </div>\r\n                    )\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport \"./FormInput.scss\";\r\nexport default function FormInput(prop: { filter: string; addTodo: Function }) {\r\n    const { filter, addTodo } = prop;\r\n\r\n    const handleSubmit = (e: any) => {\r\n        e.preventDefault();\r\n        addTodo(e.target.input.value);\r\n        // console.log(value.current?.value);\r\n        e.target.input.value = \"\";\r\n    };\r\n\r\n    // let value = useRef<HTMLInputElement>(null);\r\n\r\n    return (\r\n        (filter === \"done\" && <div></div>) || (\r\n            <div className=\"form-input\">\r\n                <form onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <input type=\"text\" required className=\"input\" name=\"input\"></input>\r\n                    <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-4 px-8 rounded-lg focus:outline-none\">\r\n                        Add\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        )\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\n\nimport FilterBar from \"./components/FilterBar\";\nimport TodoList from \"./components/TodoList\";\nimport FormInput from \"./components/FormInput\";\n\nimport TodoItem from \"./models/TodoItem\";\n\nimport \"./App.scss\";\nimport { getByText } from \"@testing-library/react\";\n\nconst todoList: TodoItem[] = [\n    { id: 1, title: \"Công việc chưa làm\", completed: false },\n    { id: 2, title: \"Công việc đã hoàn thành\", completed: true },\n];\n\nfunction App() {\n    const [todoItems, setTodoItems] = useState(() => {\n        let list: TodoItem[] = JSON.parse(\n            localStorage.getItem(\"todoItems\") ?? JSON.stringify(todoList)\n        );\n        return list;\n    });\n\n    const [filter, setFilter] = useState(\"all\");\n\n    // thay doi trang thai hoan thanh/ chua hoan thanh\n    const changeState = (id: number) => {\n        const newTodoItems = todoItems.map(\n            (item) => (item.id === id && { ...item, completed: !item.completed }) || item\n        );\n        setTodoItems(newTodoItems);\n        // setTodoItems(\n        //     todoItems.map((x) => {\n        //         if (id === x.id) return { ...x, completed: !x.completed };\n        //         return x;\n        //     })\n        // );\n    };\n\n    //xoa mot todo item dua theo id\n    const deleteItem = (id: number) => {\n        const index = todoItems.findIndex((x) => x.id === id);\n        const newTodoItems = [...todoItems];\n        newTodoItems.splice(index, 1);\n        setTodoItems(newTodoItems);\n    };\n\n    // thay doi tab\n    const changeFilter = (filter: string) => {\n        setFilter(filter);\n    };\n\n    const addTodo = (title: string) => {\n        let newTodoItems = [...todoItems];\n        if (todoItems.length > 0) {\n            const lastItem = todoItems[todoItems.length - 1];\n            let newTodoItem: TodoItem = { title: title, id: lastItem.id + 1, completed: false };\n            newTodoItems.push(newTodoItem);\n        } else {\n            let newTodoItem: TodoItem = { title: title, id: 1, completed: false };\n            newTodoItems.push(newTodoItem);\n        }\n        console.log(newTodoItems);\n        setTodoItems(newTodoItems);\n    };\n\n    useEffect(() => {\n        localStorage.setItem(\"todoItems\", JSON.stringify(todoItems));\n    }, [todoItems]);\n\n    return (\n        <div className=\"container m-auto\">\n            <div className=\"content lg:w-2/5 md:w-5/6 m-auto\">\n                <header className=\"app-header\">\n                    <h1 className=\"justify-center flex text-2xl font-bold m-5\">TODO</h1>\n                </header>\n                <div className=\"content\">\n                    <FilterBar filter={filter} changeFilter={changeFilter}></FilterBar>\n                    <FormInput filter={filter} addTodo={addTodo}></FormInput>\n                    <TodoList\n                        todoItems={todoItems}\n                        changeState={changeState}\n                        deleteItem={deleteItem}\n                        filter={filter}\n                    ></TodoList>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./assets/main.css\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}